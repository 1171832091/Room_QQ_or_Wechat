#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

const config = require('../config')
async function connects() {
  try {
    var amqp = require('amqplib');
    //创建连接对象
    var connection = await amqp.connect(config.AMQP.AMQPurl);
    // console.log(connection)
    //获取通道对象
    var channel = await connection.createChannel();
    //创建交换机
    var exchange = config.AMQP.ExchangeName
    //关联交换机，设置交换机类型，并将消息持久化
    await channel.assertExchange(exchange, "direct", { durable: true })
    return channel
  } catch (error) {
    console.log(error);
    throw error;
  }
}
//start socket.io
const io = require('socket.io')(server);
const socket = require('../socket/io.socket')
session = io.of(config.socket_Namespace)
session.on("connection", socket.connections(session, connects()))

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
